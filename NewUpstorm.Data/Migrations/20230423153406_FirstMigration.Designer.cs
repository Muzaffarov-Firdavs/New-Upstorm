// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewUpstorm.Data.DbContexts;

#nullable disable

namespace NewUpstorm.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230423153406_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NewUpstorm.Domain.Entities.MainInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("DayTemperature")
                        .HasColumnType("real");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("NightTemperature")
                        .HasColumnType("real");

                    b.Property<float>("NowTemperature")
                        .HasColumnType("real");

                    b.Property<float>("Pressure")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("MainInfos");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.RootObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("MainInfoId")
                        .HasColumnType("bigint");

                    b.Property<long>("SunTimeId")
                        .HasColumnType("bigint");

                    b.Property<long>("WindInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MainInfoId");

                    b.HasIndex("SunTimeId");

                    b.HasIndex("WindInfoId");

                    b.ToTable("RootObjects");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.SunTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Sunrise")
                        .HasColumnType("int");

                    b.Property<int>("Sunset")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SunTimes");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.WindInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<float>("Speed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WindInfos");
                });

            modelBuilder.Entity("NewUpstorm.Domain.WeatherInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RootObjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RootObjectId");

                    b.ToTable("WeatherInfos");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.RootObject", b =>
                {
                    b.HasOne("NewUpstorm.Domain.Entities.MainInfo", "MainInfo")
                        .WithMany()
                        .HasForeignKey("MainInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUpstorm.Domain.Entities.SunTime", "SunTime")
                        .WithMany()
                        .HasForeignKey("SunTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewUpstorm.Domain.Entities.WindInfo", "WindInfo")
                        .WithMany()
                        .HasForeignKey("WindInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainInfo");

                    b.Navigation("SunTime");

                    b.Navigation("WindInfo");
                });

            modelBuilder.Entity("NewUpstorm.Domain.WeatherInfo", b =>
                {
                    b.HasOne("NewUpstorm.Domain.Entities.RootObject", null)
                        .WithMany("WeatherInfo")
                        .HasForeignKey("RootObjectId");
                });

            modelBuilder.Entity("NewUpstorm.Domain.Entities.RootObject", b =>
                {
                    b.Navigation("WeatherInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
